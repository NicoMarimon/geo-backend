#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <TinyGPS++.h>
#include <PubSubClient.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
TinyGPSPlus gps;

#define RXPin 34
#define TXPin 12
HardwareSerial GPSSerial(1);

// WiFi
struct RedWifi {
  const char* ssid;
  const char* password;
};
RedWifi redes[] = {
  {"so easy", "12345678"},
  {"VodafoneBA5913", "40575826P"}
};

// MQTT
WiFiClient espClient;
PubSubClient client(espClient);
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;
const char* mqtt_topic = "/nico/project/gps1"; 

void setup() {
  Serial.begin(115200);
  GPSSerial.begin(9600, SERIAL_8N1, RXPin, TXPin);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("Error al iniciar OLED");
    while (true);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.println("Iniciando WiFi...");
  display.display();

  conectarWiFi();

  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    if (!client.connected()) {
      reconnectMQTT();
    }
    client.loop();
  }

  while (GPSSerial.available() > 0) {
    gps.encode(GPSSerial.read());
  }

  mostrarEstado();

  if (WiFi.status() == WL_CONNECTED && client.connected() && gps.location.isValid()) {
    enviarDatosMQTT();
    delay(5000); // Publicar cada 5 segundos
  }

  delay(1000); // Refrescar pantalla cada segundo
}

void conectarWiFi() {
  int numRedes = sizeof(redes) / sizeof(redes[0]);
  for (int i = 0; i < numRedes; i++) {
    Serial.print("Intentando conectar a: ");
    Serial.println(redes[i].ssid);

    WiFi.begin(redes[i].ssid, redes[i].password);
    int intentos = 0;
    while (WiFi.status() != WL_CONNECTED && intentos < 10) {
      delay(500);
      intentos++;
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("Conectado a WiFi");
      break;
    }
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("No se pudo conectar a ninguna red");
  }
}

void reconnectMQTT() {
  if (WiFi.status() == WL_CONNECTED) {
    while (!client.connected()) {
      Serial.print("Conectando a MQTT...");
      if (client.connect("TTGOClient")) {
        Serial.println("Conectado al broker MQTT");
      } else {
        Serial.print("Fallo, rc=");
        Serial.print(client.state());
        Serial.println(" intentando en 5s");
        delay(5000);
      }
    }
  }
}

void enviarDatosMQTT() {
  String payload = "{";
  payload += "\"lat\":";
  payload += String(gps.location.lat(), 6);
  payload += ",\"lon\":";
  payload += String(gps.location.lng(), 6);
  payload += "}";

  client.publish(mqtt_topic, payload.c_str());
  Serial.println("Datos enviados por MQTT!");
}

void mostrarEstado() {
  display.clearDisplay();
  display.setCursor(0, 0);

  if (WiFi.status() == WL_CONNECTED) {
    display.println("WiFi OK");
    if (client.connected()) {
      display.println("MQTT OK");
    } else {
      display.println("MQTT reconectando");
    }
  } else {
    display.println("Buscando WiFi...");
  }

  if (gps.location.isValid()) {
    display.print("Lat: ");
    display.println(gps.location.lat(), 6);
    display.print("Lon: ");
    display.println(gps.location.lng(), 6);
  } else {
    display.println("Buscando GPS...");
  }

  display.display();
}

